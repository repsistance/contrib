{"version":3,"sources":["assets/img/team/profile-picture-2.jpg","assets/img/team/profile-picture-3.jpg","assets/img/team/profile-picture-4.jpg","assets/img/dandelion-contributor-badge.png","assets/img/technologies/react-logo-transparent.svg","data/teamMembers.js","components/Widgets.js","utils/utils.js","pages/Signup.js","index.js","assets/img/illustrations/signin.svg","assets/img/team/profile-picture-1.jpg","assets/img/profile-cover.jpg"],"names":["module","exports","Profile1","faCalendarCheck","Profile2","faComment","Profile3","Profile4","create","require","inputMatchList","text","expression","bool","codec","theWorstHashEver","s","i","h","length","Math","imul","charCodeAt","String","search","useLocation","uuid","URLSearchParams","get","uuidV4","useState","ipfsPath","username","fullname","adaAmount","checkbox","values","setValues","validValues","setValidValues","handle","issuedAt","floor","Date","now","parseInt","gcCodeTemplate","process","extras","console","log","field","onValueChange","event","target","value","input","validInput","validatedList","isValid","index","checkValidationList","map","v","test","formIsValid","className","Container","Row","style","backgroundImage","BgImage","src","dandelionContribLogo","alt","Col","xs","Form","Group","id","Label","InputGroup","Text","Control","autoFocus","required","disabled","type","defaultValue","onChange","placeholder","FormCheck","Input","checked","htmlFor","Card","Link","Button","onClick","preventDefault","compress","then","result","window","location","href","variant","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a203f38d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile-picture-2.487133c5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/profile-picture-3.9a250e5c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/profile-picture-4.ccd796b3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dandelion-contributor-badge.187f0c59.png\";","module.exports = __webpack_public_path__ + \"static/media/react-logo-transparent.f7d45c01.svg\";","\nimport { faCalendarCheck, faComment } from '@fortawesome/free-solid-svg-icons';\n\nimport Profile1 from \"../assets/img/team/profile-picture-1.jpg\"\nimport Profile2 from \"../assets/img/team/profile-picture-2.jpg\"\nimport Profile3 from \"../assets/img/team/profile-picture-3.jpg\"\nimport Profile4 from \"../assets/img/team/profile-picture-4.jpg\"\n\nexport default [\n    {\n        \"id\": 1,\n        \"image\": Profile1,\n        \"name\": \"Christopher Wood\",\n        \"statusKey\": \"online\",\n        \"icon\": faCalendarCheck,\n        \"btnText\": \"Invite\"\n    },\n    {\n        \"id\": 2,\n        \"image\": Profile2,\n        \"name\": \"Jose Leos\",\n        \"statusKey\": \"inMeeting\",\n        \"icon\": faComment,\n        \"btnText\": \"Message\"\n    },\n    {\n        \"id\": 3,\n        \"image\": Profile3,\n        \"name\": \"Bonnie Green\",\n        \"statusKey\": \"offline\",\n        \"icon\": faCalendarCheck,\n        \"btnText\": \"Invite\"\n    },\n    {\n        \"id\": 4,\n        \"image\": Profile4,\n        \"name\": \"Neil Sims\",\n        \"statusKey\": \"online\",\n        \"icon\": faComment,\n        \"btnText\": \"Message\"\n    }\n]","\nimport React, { useEffect } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBookOpen,faAngleDown, faAngleUp, faChartArea, faChartBar, faChartLine, faFlagUsa, faFolderOpen, faGlobeEurope, faPaperclip, faUserPlus,faGift,faGifts } from '@fortawesome/free-solid-svg-icons';\nimport { faAngular, faBootstrap, faReact, faVuejs } from \"@fortawesome/free-brands-svg-icons\";\nimport { Col, Row, Card, Image, Button, ListGroup, ProgressBar } from '@themesberg/react-bootstrap';\nimport { create } from 'ipfs-http-client'\nimport { useState } from 'react'\n\nimport { CircleChart, BarChart, SalesValueChart, SalesValueChartphone } from \"./Charts\";\nimport Profile1 from \"../assets/img/team/profile-picture-1.jpg\";\nimport ProfileCover from \"../assets/img/profile-cover.jpg\";\nimport teamMembers from \"../data/teamMembers\";\n\nimport { Routes } from \"../routes\";\n\nimport { Link } from 'react-router-dom';\nimport { HashLink } from 'react-router-hash-link';\nconst client = create('https://ipfs.infura.io:5001/api/v0');\nconst codec = require('json-url')('lzw');\n\n\nexport const ChoosePhotoWidget = (props) => {\n  const [photo, updateFileUrl] = useState(``)\n  async function onChange(e) {\n    const file = e.target.files[0]\n    try {\n      const added = await client.add(file);\n      const url = `https://ipfs.io/ipfs/${added.path}`;\n      updateFileUrl(url);\n      if (props.onChange) {\n        props.onChange(added.path);\n      }\n    } catch (error) {\n      console.log('Error uploading file: ', error);\n    }  \n  }\n  const { title } = props;\n  return (\n    <Card border=\"light\" className=\"bg-white shadow-sm mb-4\">\n      <Card.Body>\n        <label className=\"form-label\">{title}</label>\n        <div className=\"d-xl-flex align-items-center\">\n          {photo && <div className=\"user-avatar xl-avatar\">\n            <Image fluid rounded src={photo} />\n          </div>}\n          <div className=\"file-field\">\n            <div className=\"d-flex justify-content-xl-center ms-xl-3\">\n              <div className=\"d-flex\">\n                <span className=\"icon icon-md\">\n                  <FontAwesomeIcon icon={faPaperclip} className=\"me-3\" />\n                </span>\n                <input type=\"file\" onChange={onChange} />\n                <div className=\"d-md-block text-start\">\n                  <div className=\"fw-normal text-dark mb-1\">Choose Image</div>\n                  <div className=\"text-gray small\">JPG, GIF or PNG. Max size of 800K</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n};\nconst imageUrlGetter=(_image)=>{\n  if(!_image)\n    return undefined;\n  let image=_image;\n  if(Array.isArray(_image)){\n    image=_image.join(\"\");\n  }\n  if(image.startsWith(\"ipfs://\")){\n    let temp=image.split(\"/\");\n    return \"https://ipfs.io/ipfs/\"+temp[temp.length-1];\n  }\n  if(image.startsWith(\"https://\")){\n    return image;\n  }\n  return undefined;\n}\n\nexport const NFTMinterWidget = ({gcScript}) => {\n  const [urls,setUrls]=useState({\n    mainnet:\"\",\n    testnet:\"\",\n  })\n\n  useEffect(()=>{\n    if(!gcScript)\n      return null;\n    codec.compress(gcScript).then(result => {\n      setUrls({\n        mainnet:`https://wallet.gamechanger.finance/api/1/tx/${result}`,\n        testnet:`https://testnet-wallet.gamechanger.finance/api/1/tx/${result}`,\n      });\n      //window.location.href = `https://testnet-wallet.gamechanger.finance/api/1/tx/${result}`;\n    });\n  },[gcScript]);\n  \n  if(!gcScript)\n    return null;\n  const Metadata721=gcScript.metadata[\"721\"][\"0\"];\n  const assetName=Object.keys(Metadata721)[0];\n  const metadata=Metadata721[assetName];\n  console.log({metadata})\n  const {\n    author,\n    image,\n    mediaType,\n    name,\n    url,\n    //files,\n    //version,\n  } = metadata || {};\n\n\n  return (\n    <Card border=\"light\" className=\"d-inline-block text-center p-0 m-2 mb-4\">\n      <div style={{ backgroundImage: `url(${imageUrlGetter(image)})` }} className=\"nft-cover rounded-top\" />\n      <Card.Body className=\"pb-5\">\n        <Card.Title className=\"text-black\" >{name}</Card.Title>\n        <Card.Subtitle className=\"fw-normal text-black mb-4\">by {author}</Card.Subtitle>\n        {/* <Card.Text className=\"text-black mb-4\">{address}</Card.Text> */}\n        {/* <ul className=\"text-black text-left mb-4\" >\n          <li style={{fontSize:\"0.6em\"}} ><b>Address: </b>{address}</li>\n          <li style={{fontSize:\"0.6em\"}} ><b>PolicyId: </b>{policyId}</li>\n          <li style={{fontSize:\"0.6em\"}} ><b>AssetName: </b>{assetName}</li>\n        </ul> */}\n        <div className=\"text-black text-center\">\n          Mint on:\n        </div>\n        {urls.mainnet &&\n        <Button href={urls.mainnet}   variant=\"primary\" size=\"sm\" className=\"me-2\">\n          <FontAwesomeIcon icon={faGift} className=\"me-1\" />Mainnet\n        </Button>}\n        {urls.testnet &&\n        <Button href={urls.testnet}   variant=\"primary\" size=\"sm\" className=\"me-2\">\n          <FontAwesomeIcon icon={faGift} className=\"me-1\" />Testnet\n        </Button>}\n        {/* <Button variant=\"secondary\" size=\"sm\">Send Message</Button> */}\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport const ProfileWidget = ({pic,handle,fullname,address, policyId,assetName}) => {\n  return (\n    <Card border=\"light\" className=\"text-center p-0 mb-4\">\n      <div style={{ backgroundImage: `url(${ProfileCover})` }} className=\"profile-cover rounded-top\" />\n      <Card.Body className=\"pb-5\">\n        <Card.Img src={pic} alt=\"Neil Portrait\" className=\"user-avatar large-avatar rounded-circle mx-auto mt-n7 mb-4\" />\n        <Card.Title className=\"text-black\" >{handle}</Card.Title>\n        <Card.Subtitle className=\"fw-normal text-black mb-4\">{fullname}</Card.Subtitle>\n        {/* <Card.Text className=\"text-black mb-4\">{address}</Card.Text> */}\n        <ul className=\"text-black text-left mb-4\" >\n          <li style={{fontSize:\"0.6em\"}} ><b>Address: </b>{address}</li>\n          <li style={{fontSize:\"0.6em\"}} ><b>PolicyId: </b>{policyId}</li>\n          <li style={{fontSize:\"0.6em\"}} ><b>AssetName: </b>{assetName}</li>\n        </ul>\n        <Button as={HashLink} to={Routes.DevChallenge.path}  variant=\"primary\" size=\"sm\" className=\"me-2\">\n          <FontAwesomeIcon icon={faBookOpen} className=\"me-1\" /> Resolver Challenge\n        </Button>\n        {/* <Button variant=\"secondary\" size=\"sm\">Send Message</Button> */}\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport const ProfileCardWidget = () => {\n  return (\n    <Card border=\"light\" className=\"text-center p-0 mb-4\">\n      <div style={{ backgroundImage: `url(${ProfileCover})` }} className=\"profile-cover rounded-top\" />\n      <Card.Body className=\"pb-5\">\n        <Card.Img src={Profile1} alt=\"Neil Portrait\" className=\"user-avatar large-avatar rounded-circle mx-auto mt-n7 mb-4\" />\n        <Card.Title>Neil Sims</Card.Title>\n        <Card.Subtitle className=\"fw-normal\">Senior Software Engineer</Card.Subtitle>\n        <Card.Text className=\"text-gray mb-4\">New York, USA</Card.Text>\n\n        <Button variant=\"primary\" size=\"sm\" className=\"me-2\">\n          <FontAwesomeIcon icon={faUserPlus} className=\"me-1\" /> Connect\n        </Button>\n        <Button variant=\"secondary\" size=\"sm\">Send Message</Button>\n      </Card.Body>\n    </Card>\n  );\n};\n\n\nexport const CounterWidget = (props) => {\n  const { icon, iconColor, category, title, period, percentage } = props;\n  const percentageIcon = percentage < 0 ? faAngleDown : faAngleUp;\n  const percentageColor = percentage < 0 ? \"text-danger\" : \"text-success\";\n\n  return (\n    <Card border=\"light\" className=\"shadow-sm\">\n      <Card.Body>\n        <Row className=\"d-block d-xl-flex align-items-center\">\n          <Col xl={5} className=\"text-xl-center d-flex align-items-center justify-content-xl-center mb-3 mb-xl-0\">\n            <div className={`icon icon-shape icon-md icon-${iconColor} rounded me-4 me-sm-0`}>\n              <FontAwesomeIcon icon={icon} />\n            </div>\n            <div className=\"d-sm-none\">\n              <h5>{category}</h5>\n              <h3 className=\"mb-1\">{title}</h3>\n            </div>\n          </Col>\n          <Col xs={12} xl={7} className=\"px-xl-0\">\n            <div className=\"d-none d-sm-block\">\n              <h5>{category}</h5>\n              <h3 className=\"mb-1\">{title}</h3>\n            </div>\n            <small>{period}, <FontAwesomeIcon icon={faGlobeEurope} size=\"xs\" /> WorldWide</small>\n            <div className=\"small mt-2\">\n              <FontAwesomeIcon icon={percentageIcon} className={`${percentageColor} me-1`} />\n              <span className={`${percentageColor} fw-bold`}>\n                {percentage}%\n              </span> Since last month\n            </div>\n          </Col>\n        </Row>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport const CircleChartWidget = (props) => {\n  const { title, data = [] } = props;\n  const series = data.map(d => d.value);\n\n  return (\n    <Card border=\"light\" className=\"shadow-sm\">\n      <Card.Body>\n        <Row className=\"d-block d-xl-flex align-items-center\">\n          <Col xs={12} xl={5} className=\"text-xl-center d-flex align-items-center justify-content-xl-center mb-3 mb-xl-0\">\n            <CircleChart series={series} />\n          </Col>\n          <Col xs={12} xl={7} className=\"px-xl-0\">\n            <h5 className=\"mb-3\">{title}</h5>\n\n            {data.map(d => (\n              <h6 key={`circle-element-${d.id}`} className=\"fw-normal text-gray\">\n                <FontAwesomeIcon icon={d.icon} className={`icon icon-xs text-${d.color} w-20 me-1`} />\n                {` ${d.label} `}{`${d.value}%`}\n              </h6>\n            ))}\n          </Col>\n        </Row>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport const BarChartWidget = (props) => {\n  const { title, value, percentage, data = [] } = props;\n  const labels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const series = data.map(d => d.value);\n  const percentageIcon = percentage < 0 ? faAngleDown : faAngleUp;\n  const percentageColor = percentage < 0 ? \"text-danger\" : \"text-success\";\n\n  return (\n    <Card border=\"light\" className=\"shadow-sm\">\n      <Card.Body className=\"d-flex flex-row align-items-center flex-0 border-bottom\">\n        <div className=\"d-block\">\n          <h6 className=\"fw-normal text-gray mb-2\">{title}</h6>\n          <h3>{value}</h3>\n          <small className=\"mt-2\">\n            <FontAwesomeIcon icon={percentageIcon} className={`${percentageColor} me-1`} />\n            <span className={`${percentageColor} fw-bold`}>\n              {percentage}%\n            </span>\n          </small>\n        </div>\n        <div className=\"d-block ms-auto\">\n          {data.map(d => (\n            <div key={`bar-element-${d.id}`} className=\"d-flex align-items-center text-end mb-2\">\n              <span className={`shape-xs rounded-circle bg-${d.color} me-2`} />\n              <small className=\"fw-normal\">{d.label}</small>\n            </div>\n          ))}\n        </div>\n      </Card.Body>\n      <Card.Body className=\"p-2\">\n        <BarChart labels={labels} series={series} />\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport const TeamMembersWidget = () => {\n  const TeamMember = (props) => {\n    const { name, statusKey, image, icon, btnText } = props;\n    const status = {\n      online: { color: \"success\", label: \"Online\" },\n      inMeeting: { color: \"warning\", label: \"In a meeting\" },\n      offline: { color: \"danger\", label: \"Offline\" }\n    };\n\n    const statusColor = status[statusKey] ? status[statusKey].color : 'danger'\n      , statusLabel = status[statusKey] ? status[statusKey].label : 'Offline';\n\n    return (\n      <ListGroup.Item className=\"px-0\">\n        <Row className=\"align-items-center\">\n          <Col className=\"col-auto\">\n            <a href=\"#top\" className=\"user-avatar\">\n              <Image src={image} className=\"rounded-circle\" />\n            </a>\n          </Col>\n          <Col className=\"ms--2\">\n            <h4 className=\"h6 mb-0\">\n              <a href=\"#!\">{name}</a>\n            </h4>\n            <span className={`text-${statusColor}`}>● </span>\n            <small>{statusLabel}</small>\n          </Col>\n          <Col className=\"col-auto\">\n            <Button variant=\"tertiary\" size=\"sm\">\n              <FontAwesomeIcon icon={icon} className=\"me-1\" /> {btnText}\n            </Button>\n          </Col>\n        </Row>\n      </ListGroup.Item>\n    );\n  };\n\n  return (\n    <Card border=\"light\" className=\"shadow-sm\">\n      <Card.Header className=\"border-bottom border-light d-flex justify-content-between\">\n        <h5 className=\"mb-0\">Team members</h5>\n        <Button variant=\"secondary\" size=\"sm\">See all</Button>\n      </Card.Header>\n      <Card.Body>\n        <ListGroup className=\"list-group-flush list my--3\">\n          {teamMembers.map(tm => <TeamMember key={`team-member-${tm.id}`} {...tm} />)}\n        </ListGroup>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport const ProgressTrackWidget = () => {\n  const Progress = (props) => {\n    const { title, percentage, icon, color, last = false } = props;\n    const extraClassName = last ? \"\" : \"mb-2\";\n\n    return (\n      <Row className={`align-items-center ${extraClassName}`}>\n        <Col xs=\"auto\">\n          <span className={`icon icon-md text-${color}`}>\n            <FontAwesomeIcon icon={icon} className=\"me-1\" />\n          </span>\n        </Col>\n        <Col>\n          <div className=\"progress-wrapper\">\n            <div className=\"progress-info\">\n              <h6 className=\"mb-0\">{title}</h6>\n              <small className=\"fw-bold text-dark\">\n                <span>{percentage} %</span>\n              </small>\n            </div>\n            <ProgressBar variant={color} now={percentage} min={0} max={100} />\n          </div>\n        </Col>\n      </Row>\n    );\n  };\n\n  return (\n    <Card border=\"light\" className=\"shadow-sm\">\n      <Card.Header className=\"border-bottom border-light\">\n        <h5 className=\"mb-0\">Progress track</h5>\n      </Card.Header>\n      <Card.Body>\n\n        <Progress title=\"Rocket - SaaS Template\" color=\"purple\" icon={faBootstrap} percentage={34} />\n        <Progress title=\"Pixel - Design System\" color=\"danger\" icon={faAngular} percentage={60} />\n        <Progress title=\"Spaces - Listings Template\" color=\"tertiary\" icon={faVuejs} percentage={45} />\n        <Progress title=\"Stellar - Dashboard\" color=\"info\" icon={faReact} percentage={35} />\n        <Progress last title=\"Volt - Dashboard\" color=\"purple\" icon={faBootstrap} percentage={34} />\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport const RankingWidget = () => {\n  return (\n    <Card border=\"light\" className=\"shadow-sm\">\n      <Card.Body>\n        <div className=\"d-flex align-items-center justify-content-between border-bottom border-light pb-3\">\n          <div>\n            <h6><FontAwesomeIcon icon={faGlobeEurope} className=\"icon icon-xs me-3\" /> Global Rank</h6>\n          </div>\n          <div>\n            <Card.Link href=\"#\" className=\"text-primary fw-bold\">\n              #755 <FontAwesomeIcon icon={faChartLine} className=\"ms-2\" />\n            </Card.Link>\n          </div>\n        </div>\n        <div className=\"d-flex align-items-center justify-content-between border-bottom border-light py-3\">\n          <div>\n            <h6 className=\"mb-0\"><FontAwesomeIcon icon={faFlagUsa} className=\"icon icon-xs me-3\" />Country Rank</h6>\n            <div className=\"small card-stats\">\n              United States <FontAwesomeIcon icon={faAngleUp} className=\"icon icon-xs text-success ms-2\" />\n            </div>\n          </div>\n          <div>\n            <Card.Link href=\"#top\" className=\"text-primary fw-bold\">\n              #32 <FontAwesomeIcon icon={faChartLine} className=\"ms-2\" />\n            </Card.Link>\n          </div>\n        </div>\n        <div className=\"d-flex align-items-center justify-content-between pt-3\">\n          <div>\n            <h6 className=\"mb-0\"><FontAwesomeIcon icon={faFolderOpen} className=\"icon icon-xs me-3\" />Category Rank</h6>\n            <Card.Link href=\"#top\" className=\"small card-stats\">\n              Travel &gt; Accomodation\n            </Card.Link>\n          </div>\n          <div>\n            <Card.Link href=\"#top\" className=\"text-primary fw-bold\">\n              #16 <FontAwesomeIcon icon={faChartLine} className=\"ms-2\" />\n            </Card.Link>\n          </div>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport const SalesValueWidget = (props) => {\n  const { title, value, percentage } = props;\n  const percentageIcon = percentage < 0 ? faAngleDown : faAngleUp;\n  const percentageColor = percentage < 0 ? \"text-danger\" : \"text-success\";\n\n  return (\n    <Card className=\"bg-secondary-alt shadow-sm\">\n      <Card.Header className=\"d-flex flex-row align-items-center flex-0\">\n        <div className=\"d-block\">\n          <h5 className=\"fw-normal mb-2\">\n            {title}\n          </h5>\n          <h3>${value}</h3>\n          <small className=\"fw-bold mt-2\">\n            <span className=\"me-2\">Yesterday</span>\n            <FontAwesomeIcon icon={percentageIcon} className={`${percentageColor} me-1`} />\n            <span className={percentageColor}>\n              {percentage}%\n            </span>\n          </small>\n        </div>\n        <div className=\"d-flex ms-auto\">\n          <Button variant=\"secondary\" size=\"sm\" className=\"me-2\">Month</Button>\n          <Button variant=\"primary\" size=\"sm\" className=\"me-3\">Week</Button>\n        </div>\n      </Card.Header>\n      <Card.Body className=\"p-2\">\n        <SalesValueChart />\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport const SalesValueWidgetPhone = (props) => {\n  const { title, value, percentage } = props;\n  const percentageIcon = percentage < 0 ? faAngleDown : faAngleUp;\n  const percentageColor = percentage < 0 ? \"text-danger\" : \"text-success\";\n\n  return (\n    <Card className=\"bg-secondary-alt shadow-sm\">\n      <Card.Header className=\"d-md-flex flex-row align-items-center flex-0\">\n        <div className=\"d-block mb-3 mb-md-0\">\n          <h5 className=\"fw-normal mb-2\">\n            {title}\n          </h5>\n          <h3>${value}</h3>\n          <small className=\"fw-bold mt-2\">\n            <span className=\"me-2\">Yesterday</span>\n            <FontAwesomeIcon icon={percentageIcon} className={`${percentageColor} me-1`} />\n            <span className={percentageColor}>\n              {percentage}%\n            </span>\n          </small>\n        </div>\n        <div className=\"d-flex ms-auto\">\n          <Button variant=\"secondary\" size=\"sm\" className=\"me-2\">Month</Button>\n          <Button variant=\"primary\" size=\"sm\" className=\"me-3\">Week</Button>\n        </div>\n      </Card.Header>\n      <Card.Body className=\"p-2\">\n        <SalesValueChartphone />\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport const AcquisitionWidget = () => {\n  return (\n    <Card border=\"light\" className=\"shadow-sm\">\n      <Card.Body>\n        <h5>Acquisition</h5>\n        <p>Tells you where your visitors originated from, such as search engines, social networks or website referrals.</p>\n        <div className=\"d-block\">\n          <div className=\"d-flex align-items-center pt-3 me-5\">\n            <div className=\"icon icon-shape icon-sm icon-shape-danger rounded me-3\">\n              <FontAwesomeIcon icon={faChartBar} />\n            </div>\n            <div className=\"d-block\">\n              <label className=\"mb-0\">Bounce Rate</label>\n              <h4 className=\"mb-0\">33.50%</h4>\n            </div>\n          </div>\n          <div className=\"d-flex align-items-center pt-3\">\n            <div className=\"icon icon-shape icon-sm icon-shape-quaternary rounded me-3\">\n              <FontAwesomeIcon icon={faChartArea} />\n            </div>\n            <div className=\"d-block\">\n              <label className=\"mb-0\">Sessions</label>\n              <h4 className=\"mb-0\">9,567</h4>\n            </div>\n          </div>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n};\n","export const inputMatchList = [\n    {\n        text: ('alphanumericAndSpace'),\n        expression: /^[\\w\\s]+$/,\n        bool: false\n    },\n    {\n        text: ('charRange'),\n        expression: /^.{2,64}$/,\n        bool: false\n    }\n]\n\n/**\n * input validation\n */\nexport function inputValidate(input) {\n    let list = inputMatchList.map(v => {\n        if (v.expression.test(input)) {\n            v.bool = true;\n        } else {\n            v.bool = false;\n        }\n        return v;\n    })\n    return list\n}\n/**\n * Check final validation from validations list\n */\nexport function checkValidationList(validatedList) {\n    let isValid = true;\n    for (let index = 0; index < validatedList.length; index++) {\n        const ruleItem = validatedList[index];\n        if (!ruleItem.bool) {\n            isValid = false;\n            break;\n        }\n    }\n    return isValid;\n}\n","import React, { useState, useEffect } from 'react';\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport { Routes } from \"../routes\";\n\nimport Signin from \"./examples/Signin\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAngleLeft, faEnvelope, faUnlockAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { faFacebookF, faGithub, faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { Col, Row, Form, Card, Button, FormCheck, Container, InputGroup } from '@themesberg/react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { ChoosePhotoWidget, ProfileCardWidget } from \"../components/Widgets\";\n\nimport BgImage from \"../assets/img/illustrations/signin.svg\";\nimport dandelionContribLogo from \"../assets/img/dandelion-contributor-badge.png\";\nimport Preloader from \"../components/Preloader\";\n\nimport { useParams } from 'react-router';\nimport {useLocation} from \"react-router-dom\";\nimport {checkValidationList, inputValidate} from \"../utils/utils\";\n\nimport { uuid as uuidV4 } from 'uuidv4';\n\nconst codec = require('json-url')('lzw');\n\nvar theWorstHashEver = function(s) {\n  for(var i = 0, h = 0xdeadbeef; i < s.length; i++)\n      h = Math.imul(h ^ s.charCodeAt(i), 2654435761);\n  return String((h ^ h >>> 16) >>> 0);\n};\n\nconst RouteWithLoader = ({ component: Component, ...rest }) => {\n  const [loaded, setLoaded] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => setLoaded(true), 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <Route {...rest} render={props => ( <> <Preloader show={loaded ? false : true} /> <Component {...props} /> </> ) } />\n  );\n};\n\nexport default () => {\n    const search = useLocation().search;\n    const uuid = new URLSearchParams(search).get('uuid') || (uuidV4());\n    const [values,setValues] = useState({\n        uuid,\n        ipfsPath:  \"\",\n        username:  \"\",\n        fullname:  \"\",\n        adaAmount: 1,\n        checkbox:  \"\"\n    });\n    const [validValues,setValidValues] = useState({\n        uuid: true,\n        ipfsPath:  false,\n        username:  false,\n        fullname:  false,\n        adaAmount: false,\n        checkbox:  false\n    });\n\n    const handle=`@${values.username}`;\n    const issuedAt=Math.floor(Date.now() / 1000);\n    //const expirationDelta=(60*60*24*2);\n    const adaAmount=(parseInt(values.adaAmount)*1000000);\n    const gcCodeTemplate = {\n    \"type\": \"tx\",\n    \"ttl\": 180,\n    \"title\": `${handle} - repsistance contributor`,\n    \"description\": `repsistance Contributor IDNFT minting tx`,\n    \"onSuccessURL\": `${process.env.PUBLIC_URL}/#/signin`,\n    \"outputs\": {\n      \"addr1qxyh3m7vwdw79rw97m0lghjxhhk9pjmsn6dfe2ms2m043ppvrzdp4wcghqx83fez83rz9t0lzjtqn3ug5ujnuugq4jpq39tkw2\": [\n        { \"quantity\": `${adaAmount}`, \"policyId\": \"5612bee388219c1b76fd527ed0fa5aa1d28652838bcab4ee4ee63197\", \"assetName\": \"Discoin\" }\n      ]\n    },\n    \"mints\": [\n        {\n            \"script\": {\n                \"issuers\": [\n                    {\n                        \"accountIndex\": 0,\n                        \"addressIndex\": 0\n                    }\n                ],\n                \"beforeSlotOffset\": 300\n            },\n            \"assets\": [\n                {\n                    \"assetName\": handle,\n                    \"quantity\": \"1\"\n                }\n            ]\n        }\n    ],\n    \"metadata\": {\n        \"721\": {\n            \"0\": {\n                [handle]: {\n                    \"url\": \"repsistance.com\",\n                    \"name\": \"repsistance Contributor IDNFT\",\n                    \"author\": [\"repsistance <contrib@none.guru>\"],\n                    \"image\": [\"ipfs://bafkreibjm3wjmfxbuh4hmn33mxuoowkfpvx3tvchiihlnmkagpcktyd3\", \"pa\"],\n                    \"version\": \"1.0\",\n                    \"mediaType\": \"image/png\",\n                    \"files\": [\n                        {\n                            \"name\": \"repsistance Contributor Badge\",\n                            \"mediaType\": \"image/png\",\n                            \"src\": [\"ipfs://bafkreibjm3wjmfxbuh4hmn33mxuoowkfpvx3tvchiihlnmkagpcktyd3\", \"pa\"],\n                            \"sha256\": \"\"\n                        }\n                    ]\n                }\n            }\n        },\n        \"7368\": {\n            \"0\": {\n                [handle]: {\n                    \"avatar\": {\n                        \"src\": [\"ipfs://bafkreibjm3wjmfxbuh4hmn33mxuoowkfpvx3tvchiihlnmkagpcktyd3\", \"pa\"],\n                    },\n                    \"iss\": \"https://repsistance.com\",\n                    \"aud\": [\n                        \"https://repsistance.com\"\n                    ],\n                    \"iat\": String(issuedAt),\n                    \"nbf\": String(issuedAt),\n                    \"sub\": values.uuid ,\n                    \"id\": theWorstHashEver(`${values.username}}`),\n                    \"name\": values.fullname,\n                    \"dom\": \"repsistance\",\n                    extras:{\n                      \"url\": \"repsistance.com\",\n                      \"name\": \"repsistance Contributor IDNFT\",\n                      \"author\": [\"repsistance <contrib@none.guru>\"]\n                    }\n                }\n            }\n        }\n      }\n    };\n    console.log({values,gcCodeTemplate});\n\n    const onValueChange=(field)=>(event)=>{\n        setValues({...values, [field]:event.target.value});\n\n        // Check if the input pass all regex match list\n        const validatedList = inputValidate(event.target.value);\n\n        // Get if all regexs are valid\n        const validInput = checkValidationList(validatedList);\n        setValidValues({...validValues, [field]:validInput});\n\n    }\n\n    const onSubmit=(event)=>{\n        event.preventDefault();\n        codec.compress(gcCodeTemplate).then(result => {\n          window.location.href = `https://wallet.gamechanger.finance/api/1/tx/${result}`;\n        });\n    }\n    const onLoginClick=(event)=>{\n        event.preventDefault();\n        window.location.href = `https://wallet.gamechanger.finance/api/1/address`;\n    }\n\n    const onCheckBoxChange= (field)=>(event)=>{\n        setValidValues({...validValues, [field]:event.target.checked});\n    }\n\n    const formIsValid = validValues.username && validValues.checkbox && values.uuid!==null;\n\n  return (\n    <main>\n      <section className=\"d-flex align-items-center my-5 mt-lg-6 mb-lg-5\">\n        <Container>\n          <p className=\"text-center\">\n              <FontAwesomeIcon className=\"me-2\" /> Welcome to Dandelion Contrib Portal!\n          </p>\n          <Row className=\"justify-content-center form-bg-image\" style={{ backgroundImage: `url(${BgImage})` }}>\n            <div className=\"w-250 fmxw-250\">\n              <img src={dandelionContribLogo} alt=\"Logo\" />\n            </div>\n            <Col xs={12} className=\"d-flex align-items-center justify-content-center\">\n              <div className=\"mb-4 mb-lg-0 bg-white shadow-soft border rounded border-light p-4 p-lg-5 w-100 fmxw-500\">\n                <div className=\"text-center text-md-center mb-4 mt-md-0\">\n                  <h4 className=\"mb-0\">Mint a Dandelion Contributor IDNFT</h4>\n                </div>\n                <p className=\"text-left\">\n                    <FontAwesomeIcon className=\"me-2\" /> The IDNFT is minted using your own wallet's private keys, which will make any contributor IDNFT to have a different PolicyID. In order for us to validate them, at least 1 ADA (minUTxO protocol parameter) needs to be sent to our validation address in the minting transaction.\n                </p>\n                <p className=\"text-left\">\n                    <FontAwesomeIcon className=\"me-2\" /> Currently only GameChanger wallet is supported as it was the easiest one to integrate. Give it a try!\n                </p>\n                <Form className=\"mt-4\">\n                  <Form.Group id=\"uuid\" className=\"mb-4\">\n                    <Form.Label>Contributor ID</Form.Label>\n                    <InputGroup>\n                      <InputGroup.Text id=\"inputGroupPrepend\">#\n                      </InputGroup.Text>\n                      <Form.Control autoFocus required disabled type=\"text\" defaultValue={uuid}/>\n                    </InputGroup>\n                  </Form.Group>\n                </Form>\n                <Form className=\"mt-4\">\n                  <Form.Group id=\"username\" className=\"mb-4\">\n                    <Form.Label>Username/Nickname/Handle</Form.Label>\n                    <InputGroup>\n                      <InputGroup.Text id=\"inputGroupPrepend\">@\n                      </InputGroup.Text>\n                      <Form.Control onChange={onValueChange(\"username\")}  autoFocus required type=\"text\" placeholder=\"FancyFlower42\" />\n                    </InputGroup>\n                  </Form.Group>\n                </Form>\n                <Form className=\"mt-4\">\n                  <Form.Group id=\"fullname\" className=\"mb-4\">\n                    <Form.Label>Full Name (optional)</Form.Label>\n                    <InputGroup  >\n                      <Form.Control onChange={onValueChange(\"fullname\")} autoFocus type=\"text\" placeholder=\"\" />\n                    </InputGroup>\n                  </Form.Group>\n                  <FormCheck  type=\"checkbox\" className=\"d-flex mb-4\">\n                    <FormCheck.Input onChange={onCheckBoxChange(\"checkbox\")} required id=\"terms\" className=\"me-2\" />\n                    <FormCheck.Label htmlFor=\"terms\">\n                      I do agree to validate <Card.Link> this IDNFT </Card.Link> as Dandelion Contributor by sending\n                      <Form.Group id=\"adaAmount\" className=\"mb-4\">\n                        <InputGroup className=\"mb-3\">\n                        <InputGroup.Text>$ADA</InputGroup.Text>\n                          <Form.Control required onChange={onValueChange(\"adaAmount\")} autoFocus type=\"number\" defaultValue=\"1\" />\n                        </InputGroup>\n                      </Form.Group>\n                    </FormCheck.Label>\n                  </FormCheck>\n\n                  <Button disabled={!formIsValid} onClick={onSubmit} variant=\"primary\" type=\"submit\" className=\"w-100\">\n                    Contribute\n                  </Button>\n                </Form>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </section>\n    </main>\n  );\n};\n","// =========================================================\n// * Volt React Dashboard\n// =========================================================\n\n// * Product Page: https://themesberg.com/product/dashboard/volt-react\n// * Copyright 2021 Themesberg (https://www.themesberg.com)\n// * Official Repository: https://github.com/themesberg/volt-react-dashboard\n// * License: MIT License (https://themesberg.com/licensing)\n\n// * Designed and coded by https://themesberg.com\n\n// =========================================================\n\n// * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. Please contact us to request a removal.\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\n\n// core styles\nimport \"./scss/volt.scss\";\nimport \"./scss/landing.scss\";\n\n// vendor styles\nimport \"@fortawesome/fontawesome-free/css/all.css\";\nimport \"react-datetime/css/react-datetime.css\";\n\nimport HomePage from \"./pages/Signup\";\n//import ScrollToTop from \"./components/ScrollToTop\";\n\nReactDOM.render(\n  <HashRouter>\n    <HomePage />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n","module.exports = __webpack_public_path__ + \"static/media/signin.58ee1d5a.svg\";","module.exports = __webpack_public_path__ + \"static/media/profile-picture-1.4d26e151.jpg\";","module.exports = __webpack_public_path__ + \"static/media/profile-cover.9992e0ee.jpg\";"],"sourceRoot":""}